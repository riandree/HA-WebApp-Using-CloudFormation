AWSTemplateFormatVersion: '2010-09-09'

Description: |
  CloudFormation template for creating the infrastructure needed for
  the high-availability Web App project of the cloud devops nanodegree.

  use --capabilities CAPABILITY_NAMED_IAM when creating the stack using the aws cli.

Parameters:

  EnvironmentName:
    Description: Environment Name
    Type: String
    Default: development
    AllowedValues:
      - development
      - test
      - production

  VpcCIDR:
    Description: IP-Range 
    Type: String
    Default: 10.0.0.0/16

  Subnet1CIDR:
    Description: IP-Range 
    Type: String
    Default: 10.0.1.0/24

  Subnet2CIDR:
    Description: IP-Range 
    Type: String
    Default: 10.0.2.0/24

  PublicSubnet1CIDR:
    Description: IP-Range 
    Type: String
    Default: 10.0.3.0/24

  PublicSubnet2CIDR:
    Description: IP-Range 
    Type: String
    Default: 10.0.4.0/24

  WebServerEC2AMI:
    Description: IP-Range 
    Type: String
    Default: 10.0.2.0/24

  WebServerEC3InstanceType: 
    Type: String
    Default: t3.small
    AllowedValues: 
      - t3.small
      - t3.medium
      - t3.large
    Description: Instance type to use for the web server ec2 instances (t3.small, t3.medium or t3.large)

Outputs:

  ELBDNSName:
    Description: The DNS name of the LoadBalancer providing access to the web application.
    Value: !Sub http://${WebLoadBalancer.DNSName}â€š

Resources:

# ------------ Virtual Private Network

  WebAppVPC:
    Type: AWS::EC2::VPC
    Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsHostnames: true
        Tags: 
           - Key: Name 
             Value: !Sub 'Udagram-${EnvironmentName}-WebApp'   
           - Key: Env
             Value: !Sub ${EnvironmentName}

  IPGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
         - Key: Name 
           Value: !Sub 'Udagram-${EnvironmentName}-IPGateway'   
         - Key: Env
           Value: !Sub ${EnvironmentName}

  IPGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WebAppVPC
      InternetGatewayId: !Ref IPGateway

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

# ------------ Subnets within VPC


# private subnets for the apache web-servers

  WebServerSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WebAppVPC
      CidrBlock: !Ref Subnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name 
          Value: !Sub Udagram (${EnvironmentName}) private Subnet (AZ1)
        - Key: Env
          Value: !Sub ${EnvironmentName}

  WebServerSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WebAppVPC
      CidrBlock: !Ref Subnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name 
          Value: !Sub Udagram (${EnvironmentName}) private Subnet (AZ2)
        - Key: Env
          Value: !Sub ${EnvironmentName}

# public subnets for the load balancer nodes

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WebAppVPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub Udagram (${EnvironmentName}) public Subnet (AZ1)
        - Key: Env
          Value: !Sub ${EnvironmentName}

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WebAppVPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub Udagram (${EnvironmentName}) public Subnet (AZ2)
        - Key: Env
          Value: !Sub ${EnvironmentName}

# ------------ Routing

  WebserverSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WebAppVPC
      Tags:
        - Key: Name
          Value: !Sub Udagram (${EnvironmentName}) WebServer Subnet-RouteTable 
        - Key: Env
          Value: !Sub ${EnvironmentName}

  DefaultPrivateNatRoute: 
      Type: AWS::EC2::Route
      Properties: 
          RouteTableId: !Ref WebserverSubnetRouteTable
          DestinationCidrBlock: 0.0.0.0/0   
          NatGatewayId: !Ref NatGateway        

  WebServerRouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebServerSubnet1
      RouteTableId: !Ref WebserverSubnetRouteTable

  WebServerRouteTableAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebServerSubnet2
      RouteTableId: !Ref WebserverSubnetRouteTable

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WebAppVPC
      Tags:
        - Key: Name
          Value: !Sub Udagram (${EnvironmentName}) public Subnet-RouteTable 
        - Key: Env
          Value: !Sub ${EnvironmentName}

  DefaultPublicRoute: 
      Type: AWS::EC2::Route
      Properties: 
          RouteTableId: !Ref PublicSubnetRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref IPGateway

  RouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable

  RouteTableAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable

# ------------ Network Security

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow access to webservers from within vpc via http port 80
      VpcId: !Ref WebAppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VpcCIDR
      SecurityGroupEgress:   # We need this egress in order for the Webservers to be able to
        - IpProtocol: "tcp"  # use apt to install the software-packages (Port 80) needed and to use aws cli to
          FromPort: 80       # download the website contents from s3 (Port 443)
          ToPort: 80      
          CidrIp: 0.0.0.0/0
        - IpProtocol: "tcp"  
          FromPort: 443        
          ToPort: 443      
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub Udagram (${EnvironmentName}) Apache Sec Group
        - Key: Env
          Value: !Sub ${EnvironmentName}

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allows access to ELB from everywhere and from ELB to WebServers
      VpcId: !Ref WebAppVPC
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          DestinationSecurityGroupId: !Ref WebServerSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub Udagram (${EnvironmentName}) ELB Sec Group
        - Key: Env
          Value: !Sub ${EnvironmentName}
      
# ------------- IAM

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: UdacityS3ReadOnlyEC2
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "S3ReadOnlyAccess"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub Udagram${EnvironmentName}S3ROAccessRole
        - Key: Env
          Value: !Sub ${EnvironmentName}

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

# ------------- Autoscaling / EC2 Instances

  WebServerAutoScaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: NatGateway
    Properties: 
      AutoScalingGroupName: WebServerAutoscaling
      AvailabilityZones: 
        - !Select [ 0, !GetAZs '' ]
        - !Select [ 1, !GetAZs '' ]
      LaunchConfigurationName: !Ref WebServerLauchConfig
      MaxSize: 3
      MinSize: 2
      TargetGroupARNs: 
        - !Ref WebTargetGroup
      VPCZoneIdentifier: 
        - !Ref WebServerSubnet1
        - !Ref WebServerSubnet2
      Tags:
        - Key: Name
          PropagateAtLaunch: false
          Value: !Sub Udagram (${EnvironmentName}) autoscaling group
        - Key: Env
          PropagateAtLaunch: true
          Value: !Sub ${EnvironmentName}
   
  WebServerLauchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      IamInstanceProfile : !Ref InstanceProfile
      ImageId: ami-0b418580298265d5c                    # Canonical, Ubuntu, 18.04 LTS, amd64 bionic image build on 2020-01-12
      InstanceType: !Ref WebServerEC3InstanceType
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 10
      LaunchConfigurationName: WebServerLaunchConfig
      SecurityGroups: 
        - !Ref WebServerSecurityGroup
      UserData: !Base64 |
          #!/bin/bash -xe
          exec > >(tee /home/ubuntu/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip

# ------------- Load Balancing

  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: WebLoadBalancer 
      Type: application
      SecurityGroups: 
       - !Ref LoadBalancerSecurityGroup
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags: 
        - Key: Name 
          Value: !Sub 'ELB-${EnvironmentName}' 
        - Key: Env
          Value: !Sub ${EnvironmentName}

  HTTPlistener:
   Type: AWS::ElasticLoadBalancingV2::Listener
   Properties:
     DefaultActions:
       - Type: fixed-response 
         FixedResponseConfig:
           ContentType: text/plain
           MessageBody: "sorry ... the resource you requested could not be found."
           StatusCode: 404
     LoadBalancerArn: !Ref WebLoadBalancer
     Port: 80
     Protocol: HTTP
 
  HttpListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [ "/*" ]
      ListenerArn: !Ref HTTPlistener
      Priority: 1

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: WegTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref WebAppVPC
      HealthCheckEnabled: true      
      HealthCheckIntervalSeconds : 10
      HealthCheckPath : "/"
      HealthCheckPort : "80"
      HealthCheckProtocol : HTTP
      HealthCheckTimeoutSeconds : 4
      HealthyThresholdCount : 2
      UnhealthyThresholdCount : 2
      Matcher:
        HttpCode: 200
      Tags: 
        - Key: Name 
          Value: !Sub 'ELB-TargetGroup-${EnvironmentName}' 
        - Key: Env
          Value: !Sub ${EnvironmentName}
