AWSTemplateFormatVersion: '2010-09-09'

Description: |
  CloudFormation template for creating the infrastructure needed for
  the high-availability Web App project of the cloud devops nanodegree.

  use --capabilities CAPABILITY_NAMED_IAM when creating the stack using the aws cli.

Parameters:

  EnvironmentName:
    Description: Environment Name
    Type: String
    Default: development
    AllowedValues:
      - development
      - test
      - production

  VpcCIDR:
    Description: IP-Range 
    Type: String
    Default: 10.0.0.0/16

  Subnet1CIDR:
    Description: IP-Range 
    Type: String
    Default: 10.0.1.0/24

  Subnet2CIDR:
    Description: IP-Range 
    Type: String
    Default: 10.0.2.0/24

Resources:

  WebAppVPC:
    Type: AWS::EC2::VPC
    Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsHostnames: true
        Tags: 
           - Key: Name 
             Value: !Sub 'VPC-${EnvironmentName}-WebApp'   

  IPGateway:
    Type: AWS::EC2::InternetGateway
  IPGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WebAppVPC
      InternetGatewayId: !Ref IPGateway

# ------------ Subnets

  WebServerSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WebAppVPC
      CidrBlock: !Ref Subnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Subnet (AZ1)


  WebServerSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WebAppVPC
      CidrBlock: !Ref Subnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Subnet (AZ2)

# ------------ Routing

  WebserverSubnetRoutTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WebAppVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} WebServer Subnet-RouteTable 

  DefaultPublicRoute: 
      Type: AWS::EC2::Route
      Properties: 
          RouteTableId: !Ref WebserverSubnetRoutTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref IPGateway

  RouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebServerSubnet1
      RouteTableId: !Ref WebserverSubnetRoutTable

  RouteTableAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebServerSubnet2
      RouteTableId: !Ref WebserverSubnetRoutTable

# ------------ Network Security

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow access via http port 80
      VpcId: !Ref WebAppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp              # FixMe
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allows access to ELB and from ELB to WebServers
      VpcId: !Ref WebAppVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      
# ------------- IAM

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: UdacityS3ReadOnlyEC2
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "S3ReadOnlyAccess"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

# ------------- Autoscaling / EC2 Instances

  WebServerAutoScaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: WebServerAutoscaling
      AvailabilityZones: 
        - !Select [ 0, !GetAZs '' ]
        - !Select [ 1, !GetAZs '' ]
      # HealthCheckGracePeriod: Integer
      # HealthCheckType: String
      LaunchConfigurationName: !Ref WebServerLauchConfig
      # LoadBalancerNames: 
      # - String
      MaxSize: 3
      MinSize: 2
      #Tags: 
      #  - TagProperty
      TargetGroupARNs: 
        - !Ref WebTargetGroup
      VPCZoneIdentifier: 
        - !Ref WebServerSubnet1
        - !Ref WebServerSubnet2
  
  WebServerLauchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      IamInstanceProfile : !Ref InstanceProfile
      ImageId: ami-0b418580298265d5c
      InstanceType: t3.small
      LaunchConfigurationName: WebServerLaunchConfig
      SecurityGroups: 
        - !Ref WebServerSecurityGroup
      UserData: !Base64 |
          #!/bin/bash -xe
          exec > >(tee /home/ubuntu/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip

# ------------- Load Balancing

  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: WebLoadBalancer 
      Type: application
      SecurityGroups: 
       - !Ref LoadBalancerSecurityGroup
      Subnets: 
        - !Ref WebServerSubnet1
        - !Ref WebServerSubnet2
      Tags: 
        - Key: Name 
          Value: !Sub 'ELB-${EnvironmentName}' 

  HTTPlistener:
   Type: AWS::ElasticLoadBalancingV2::Listener
   Properties:
     DefaultActions:
       - Type: fixed-response 
         FixedResponseConfig:
           ContentType: text/plain
           MessageBody: "sorry ... the resource you requested could not be found."
           StatusCode: 404
     LoadBalancerArn: !Ref WebLoadBalancer
     Port: 80
     Protocol: HTTP
 
  HttpListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [ "/*" ]
      ListenerArn: !Ref HTTPlistener
      Priority: 1

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true      
      Name: WegTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref WebAppVPC
      Tags: 
        - Key: Name 
          Value: !Sub 'ELB-TargetGroup-${EnvironmentName}' 
